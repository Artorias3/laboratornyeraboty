/*Написать программу, которая записывает координаты вершин треугольника, вводимые с клавиатуры,
в файл F1. Из файла F1 получить файл F2, в котором кроме координат вершин содержится и тип
треугольника (равносторонний, равнобедренный, прямоугольный, разносторонний).
Подсчитать количество треугольников разных типов, содержащихся в файле F2*/

#pragma warning (disable: 4996)
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define WRONGIN		-1	//
#define CORRECTIN	 0	//

struct point
{
	double x;
	double y;
};
struct triangle
{
	struct point A;
	struct point B;
	struct point C;
};

FILE* openFile(char file_route[], char mode[]);
struct point getPoint(void);
int triangleCheck(struct triangle obj);
struct triangle getTrglFromFile(FILE *insrc);
void printTriangleType(FILE *outsrc, struct triangle obj);

int num_of_types[4] = { 0, 0, 0, 0 };
char file1[] = "F1.txt", file2[] = "F2.txt", modeWrite[] = "w", modeRead[] = "r";

int main(void)
{
	FILE *F1 = NULL, *F2 = NULL;
	struct triangle obj = { {0.0, 0.0}, {0.0, 0.0}, {0.0, 0.0} };
	int num_of_trgl = 0, i = 0;
	

	printf("Enter the number of triangles: ");
	scanf_s("%i", &num_of_trgl);
	F1 = openFile(file1, modeWrite);

	printf("Enter space separated coordinates for each point\n");
	for (i = 1; i <= num_of_trgl; i++)
	{
		printf("%i triangle:\n", i);
		printf("A: ");
		obj.A = getPoint();
		printf("B: ");
		obj.B = getPoint();
		printf("C: ");
		obj.C = getPoint();
		printf("A(%5.2lf;%5.2lf) B(%5.2lf;%5.2lf) C(%5.2lf;%5.2lf)\n", obj.A.x, obj.A.y, obj.B.x, obj.B.y, obj.C.x, obj.C.y);

		if (triangleCheck(obj) == CORRECTIN)
		{
			fprintf(F1, "%5i)A(%5.2lf;%5.2lf) B(%5.2lf;%5.2lf) C(%5.2lf;%5.2lf)\n", i, obj.A.x, obj.A.y, obj.B.x, obj.B.y, obj.C.x, obj.C.y);
			printf("The triangle was successfully written to the file\n");
		}
		else
		{
			printf("Entered a non-existent triangle\n");
			i--;
		}
	}

	fclose(F1);
	F1 = openFile(file1, modeRead);
	F2 = openFile(file2, modeWrite);

	for (i = 1; i <= num_of_trgl; i++)
	{
		obj = getTrglFromFile(F1);
		fprintf(F2, "%5i)A(%5.2lf;%5.2lf) B(%5.2lf;%5.2lf) C(%5.2lf;%5.2lf)\t", i, obj.A.x, obj.A.y, obj.B.x, obj.B.y, obj.C.x, obj.C.y);
		printTriangleType(F2, obj);
	}

	fprintf(F2, "number of different types of triangles:\n");
	fprintf(F2, "rectangular triangles: %4i\n", num_of_types[0]);
	fprintf(F2, "equilateral triangles: %4i\n", num_of_types[1]);
	fprintf(F2, "isosceles triangles: %6i\n", num_of_types[2]);
	fprintf(F2, "versatile triangles: %6i\n", num_of_types[3]);
	printf("The program completed successfully\n");
	printf("Check the files in the project folder\n");

	fclose(F1);
	fclose(F2);
	system("pause");
	return 0;
}

FILE* openFile(char file_route[], char mode[])
{
	FILE *stream = NULL;
	if ((stream = fopen(file_route, mode)) == NULL)
	{
		printf("\nError while opening file %s in mode %s\n", file_route, mode);
		system("pause");
		exit(EXIT_SUCCESS);
	}
	return stream;
}

struct point getPoint(void)
{
	struct point obj = { 0.0, 0.0 };
	scanf_s("%lf %lf", &obj.x, &obj.y);
	return obj;
}

int triangleCheck(struct triangle obj)
{
	int ab = 0, bc = 0, ca = 0;

	ab = (int)(sqrt(pow(obj.B.x - obj.A.x, 2) + pow(obj.B.y - obj.A.y, 2)) * 100000.0);
	bc = (int)(sqrt(pow(obj.C.x - obj.B.x, 2) + pow(obj.C.y - obj.B.y, 2)) * 100000.0);
	ca = (int)(sqrt(pow(obj.A.x - obj.C.x, 2) + pow(obj.A.y - obj.C.y, 2)) * 100000.0);

	if ((ab + bc) > ca && (ca + ab) > bc && (bc + ca) > ab)
		return CORRECTIN;

	return WRONGIN;
}

struct triangle getTrglFromFile(FILE *insrc)
{
	struct triangle obj = { {0.0, 0.0}, {0.0, 0.0}, {0.0, 0.0} };
	char buffer[46];

	fseek(insrc, 6, SEEK_CUR);
	fgets(buffer, 46, insrc);
	sscanf_s(buffer, "A(%lf;%lf) B(%lf;%lf) C(%lf;%lf)", &obj.A.x, &obj.A.y, &obj.B.x, &obj.B.y, &obj.C.x, &obj.C.y);

	return obj;
}

void printTriangleType(FILE *outsrc, struct triangle obj)
{
	int ab = 0, bc = 0, ca = 0, vABx = 0, vABy = 0, vBCx = 0, vBCy = 0, vCAx = 0, vCAy = 0;

	ab = (int)(sqrt(pow(obj.B.x - obj.A.x, 2) + pow(obj.B.y - obj.A.y, 2)) * 100000.0);
	bc = (int)(sqrt(pow(obj.C.x - obj.B.x, 2) + pow(obj.C.y - obj.B.y, 2)) * 100000.0);
	ca = (int)(sqrt(pow(obj.A.x - obj.C.x, 2) + pow(obj.A.y - obj.C.y, 2)) * 100000.0);
	vABx = (int)((obj.B.x - obj.A.x) * 1000.0);
	vABy = (int)((obj.B.y - obj.A.y) * 1000.0);
	vBCx = (int)((obj.C.x - obj.B.x) * 1000.0);
	vBCy = (int)((obj.C.y - obj.B.y) * 1000.0);
	vCAx = (int)((obj.A.x - obj.C.x) * 1000.0);
	vCAy = (int)((obj.A.y - obj.C.y) * 1000.0);

	if ((vABx * vBCx + vABy * vBCy) == 0 || (vBCx * vCAx + vBCy * vCAy) == 0 || (vCAx * vABx + vCAy * vABy) == 0)
	{
		fprintf(outsrc, "rectangular ");
		num_of_types[0]++;
	}
	if (ab == bc && ab == ca)
	{
		fprintf(outsrc, "equilateral ");
		num_of_types[1]++;
	}
	else if (ab == bc || bc == ca || ca == ab)
	{
		fprintf(outsrc, "isosceles ");
		num_of_types[2]++;
	}
	else
	{
		fprintf(outsrc, "versatile ");
		num_of_types[3]++;
	}

	fprintf(outsrc, "\n");
	return;
}
